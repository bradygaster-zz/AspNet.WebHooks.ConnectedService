<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ parameter name="ns" type="System.String" #>
<#@ parameter name="classNamePrefix" type="System.String" #>
<#@ parameter name="receiverName" type="System.String" #>
<#@ parameter name="incomingType" type="System.String" #>
using Microsoft.AspNet.WebHooks;
using Newtonsoft.Json.Linq;
using System.Linq;
using System.Threading.Tasks;

namespace <#= ns #>.WebHookHandlers
{
    public class <#= classNamePrefix #>WebHookHandler : WebHookHandler
    {
        public override Task ExecuteAsync(string receiver, WebHookHandlerContext context)
        {
			// make sure we're only processing the intended type of hook
			if("<#= receiverName #>".Equals(receiver, System.StringComparison.CurrentCultureIgnoreCase))
			{
				// todo: replace this placeholder functionality with your own code
				string action = context.Actions.First();
				<#= incomingType #> incoming = context.GetDataOrDefault<<#= incomingType #>>();
			}
            
            return Task.FromResult(true);
        }
    }
}
